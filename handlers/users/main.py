import logging
import re
import time

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove, CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager

from aiogram_dialog.widgets.kbd import Multiselect, Column, Button, Group
from aiogram_dialog.widgets.text import Format, Const
from operator import itemgetter

from keyboards.default import contact_keyboard
from keyboards.inline.buttons import gender_keyboard, gender_callback, accept_keyboard, \
    accept_callback, back, start_button, additional_callback, ask_button, cancel_keyboard
from loader import dp, registry, db, our_sheet
from aiogram.utils.markdown import hlink

from utils.connector import spreadsheet_id_1


class Sub(StatesGroup):
    gender = State()
    text = State()
    planning_to_come = State()
    new_gender = State()


@dp.message_handler(CommandStart(), state="*")
async def bot_start(message: types.Message,  state: FSMContext):
    text = "<b>–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫—É STUDIO 69 </b>üî∫\n\n" \
           "–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –î–∞–≤–∏–¥ –∏ –í–ª–∞–¥ üôå\n\n" \
           "–ö–∞–∂–¥—ã–π, –∫—Ç–æ –ø—Ä–æ—à–µ–ª –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –∫ <b>–∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram-–∫–∞–Ω–∞–ª—É </b>—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª–∏–∂–∞–π—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.\n\n" \
           "‚ùóÔ∏è–ú—ã –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –≤—Å–µ –Ω–∞—à–∏ –≤–µ—á–µ—Ä–∏–Ω–∫–∏.<i> –í–µ–¥—å —Ä–µ—à–µ–Ω–∏–µ –æ –≤–∞—à–µ–º —É—á–∞—Å—Ç–∏–∏ </i>–ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –º—ã, –Ω–æ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –≥–æ—Å—Ç–∏ <b>STUDIO 69</b>.\n\n" \
           "‚ÄºÔ∏è–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º.<i> –í—Å—è —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞ </i>–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º."
    try:
        await message.answer(text, reply_markup=start_button)
    except Exception as e:
        logging.info(e)
    
    await state.set_state("start")


@dp.callback_query_handler(additional_callback.filter(status="start"), state="start")
async def ask_first_last_name(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    try:
        await call.message.answer("<b>–í–∞—à–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—è / First, last Name</b>\n"
                             "<i>–¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è / Only real name</i>", reply_markup=await cancel_keyboard("start"))
    except Exception as e:
        logging.info(e)
    
    await state.set_state("first_last_name")


@dp.message_handler(state="start")
async def ask_first_last_name(message: types.Message):
    try:
        await message.answer("<b>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'START'\n"
                             "For starting registration press the button 'START'</b>")
    except Exception as e:
        logging.info(e)


@dp.message_handler(state="first_last_name")
async def ask_date_of_birth(message: types.Message, state: FSMContext):
    f_l_name = message.text
    await state.update_data(first_last_name=f_l_name)

    try:
        telegram_ = f'@{message.from_user.username}'
        await state.update_data(telegram=telegram_)
        await message.answer("<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è / Date of birth</b>\n"
                             "<i>DD/–ú–ú/YYYY</i>", reply_markup=await back("first_last_name"))
    except Exception as e:
        logging.info(e)
    
    await state.set_state("date_of_birth")


@dp.message_handler(regexp=r'^(0?[1-9]|[12][0-9]|3[01])(/|.)(0?[1-9]|1[0-2])(/|.)\d\d\d\d$', state="date_of_birth")
async def ask_gender(message: types.Message, state: FSMContext):
    date = message.text
    await state.update_data(date_of_birth=date)
    
    try:
        await message.answer("<b>–í–∞—à –ø–æ–ª / Your gender</b>", reply_markup=gender_keyboard)
    except Exception as e:
        logging.info(e)
    await Sub.gender.set()


@dp.message_handler(state="date_of_birth")
async def ask_date_of_birth(message: types.Message, state: FSMContext):
    try:
        await message.answer("Invalid date. Try again")
    except Exception as e:
        logging.info(e)
    
    await state.set_state("date_of_birth")


async def redirect_to_ask_gender(call: CallbackQuery, button: Button, manager: DialogManager):
    await call.answer(cache_time=40)

    try:
        await call.message.answer("<b>–í–∞—à –ø–æ–ª / Your gender</b>", reply_markup=gender_keyboard)
        
    except Exception as e:
        logging.info(e)
    await Sub.gender.set()
    

async def get_data_(call: CallbackQuery, button: Button, manager: DialogManager):
    
    data = multiselect.get_checked(manager)

    manager.proxy.update({"cities": data})
    await call.answer(cache_time=60)

    try:
        await call.message.answer("<b>–ö–∞–∫ –≤—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏? / How did you hear about us?</b>",
                                  reply_markup=await back("check_box"))
    except Exception as e:
        logging.info(e)
    await Sub.planning_to_come.set()



items = [("–î–∞, –≤ –ú–æ—Å–∫–≤–µ / Yes, in Moscow", 1),
         ("–î–∞, –≤ –ù—å—é-–ô–æ—Ä–∫–µ / Yes, in New York", 2),
         ("–î–∞, –≤ –ë–µ—Ä–ª–∏–Ω–µ / Yes, in Berlin", 3),
         ("–î–∞, –≤ –ü–∞—Ä–∏–∂–µ / Yes, in Paris", 4),
         ("–î–∞, –≤ –ö–∏–µ–≤–µ / Yes, in Kyiv", 5),
         ("–ù–µ—Ç / No", 6)]


multiselect = Multiselect(
    Format("‚úì {item[0]}"), Format("{item[0]}"),
    "mselect",
    itemgetter(0),
    items,
)
dialog = Dialog(Window(Const("<b>–ü–æ—Å–µ—â–∞–ª–∏ –Ω–∞—à–∏ –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö? / </b>"
                             "<i>Have you been to our parties in other countries?</i>"),
                       Group(Column(multiselect), Button(Const("–û—Ç–ø—Ä–∞–≤–∏—Ç—å / Send"), "b1", on_click=get_data_)
                             , Button(Const("–ù–∞–∑–∞–¥ / Back"), "b2", on_click=redirect_to_ask_gender)) ,state=Sub.text))

registry.register(dialog)


@dp.callback_query_handler(gender_callback.filter(), state=Sub.gender)
async def ask_about_party(call: types.CallbackQuery, callback_data: dict, state: FSMContext, dialog_manager: DialogManager):

    await call.answer(cache_time=30)
    your_gender__ = callback_data.get("g")

    call.message.message_id = (await call.message.answer("·Ö†")).message_id

    dialog_manager.proxy.update({"your_gender": your_gender__})
    await Sub.text.set()
    await dialog_manager.start(Sub.text, reset_stack=True)


@dp.message_handler(state=Sub.planning_to_come)
async def planning_to_come_func(message: types.Message, state: FSMContext):
    text = message.text
    await state.update_data(how_did_hear=text)
    try:
        await message.answer("<b>–° –∫–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–π—Ç–∏? / Who are you planning to come with?\n\n</b>"
                             "<i>–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤"
                             " Instagram "
                             "(–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–π).</i>", reply_markup=await back("how_did_your_hear"))
    except Exception as e:
        logging.info(e)
    
    await state.set_state("will_you_come")


@dp.message_handler(state="will_you_come")
async def get_phone_number(message: types.Message, state: FSMContext):
    text = message.text
    await state.update_data(planning_to_come=text)
    
    try:
        id = (await message.answer("<b>–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ / Your phone number </b>\n", reply_markup=contact_keyboard)).message_id
        await message.answer("<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è'.\n"
                             "Press the button 'Share'</i>",
                             reply_markup=await back("with_who", id))
                             
    except Exception as e:
        logging.info(e)
    await state.set_state("phone_number")


@dp.message_handler(content_types=types.ContentType.CONTACT, state="phone_number")
async def get_accounts(message: types.Message, state: FSMContext):
    
    contact = message.contact.phone_number
    await state.update_data(phone_number=contact)

    try:
        u_id = (await message.answer("<b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ / Social profiles </b>\n"
                             "<i>\n–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à Instagram –ª–∏–±–æ Facebook (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–π) / "
                             "Link to your Instagram or Facebook (account must be public)</i>\n\n",
                             reply_markup=ReplyKeyboardRemove())).message_id
        await message.answer(
                             "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: https://instagram.com/studio_69_party –∏–ª–∏ <code>@–∏–º—è</code>\n"
                             "For example: https://instagram.com/studio_69_party or <code>@name</code></i>",
                             reply_markup=await back("share_number", u_id), disable_web_page_preview=True)

        await state.set_state("rules")
    except Exception as e:
        logging.info(e)

r_facebook = r"(?:(?:http|https):\/\/)?(?:www.)?facebook.com\/(?:(?:\w)*#!\/)?(?:pages\/)?(?:[?\w\-]*\/)?(?:profile.php\?id=(?=\d.*))?([\w\-]*)?"
r_instagram = r"(?:https?:)?\/\/(?:www\.)?(?:instagram\.com|instagr\.am)\/(?P<username>[A-Za-z0-9_](?:(?:[A-Za-z0-9_]|(?:\.(?!\.))){0,28}(?:[A-Za-z0-9_]))?)"


async def link_checker(links) -> bool:
    for li in links:
        if li:
            if not (re.search(r_facebook, li) or (re.search(r_instagram, li) or re.search(r"@\w", li))):
                return False
    return True


@dp.message_handler(state="rules")
async def accept_rules(message: types.Message, state: FSMContext):
    links = message.text
    links = re.split("[ |\n| , ]", links)
    check = await link_checker(links)
    if check:
        await state.update_data(links_to_accounts=links)
        try:
            await message.answer("<b>–°–æ–≥–ª–∞—à–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. </b>/ "
                                 "<i>The agreement with personal data processing rules.</i>\n\n " +
                                 hlink("–ü—Ä–∞–≤–∏–ª–∞/Rules", "studio69.link/–ø—Ä–∞–≤–∏–ª–∞_–æ–±—Ä–∞–±–æ—Ç–∫–∞_–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö_–¥–∞–Ω–Ω—ã—Ö"),
                                 reply_markup=accept_keyboard, disable_web_page_preview=True)
        except Exception as e:
            logging.info(e)
    
        await state.set_state("finish")
    else:
        await message.answer("Invalid link or username. Try again")
        await state.set_state("rules")
    

@dp.callback_query_handler(accept_callback.filter(), state="finish")
async def finish_dialog(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    
    try:
        await call.message.answer("<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã </b>‚ù§\n\nÔ∏è"
                                  "–ú—ã —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–±–∏—Ä–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞—à–∏—Ö –≤–µ—á–µ—Ä–∏–Ω–æ–∫, –ø–æ—ç—Ç–æ–º—É <i>—Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ"
                                  " 48 —á–∞—Å–æ–≤,</i> —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª–æ–≤–∏—è—Ö. üòâ")
        await call.message.answer('–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ñ–º–∏ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"\n'
                                  'Still have questions? Click "Ask a question"', reply_markup=ask_button)
    except Exception as e:
        logging.info(e)
        
    data = await state.get_data()
    links = ["first_last_name", "date_of_birth", "your_gender", "cities", "how_did_hear",
             "planning_to_come", "phone_number", "telegram", "links_to_accounts"]
    
    user_id = call.from_user.id
    phone_number = data.get("phone_number")

    data = [data.get(i) if not (type(data.get(i))) is list else " --- ".join(data.get(i)) for i in links]
    data.insert(0, time.strftime("%Y-%m-%d %X"))
    data.insert(0, user_id)
    
    our_sheet.append_values(spreadsheet_id_1, data, "A2")
    
    if not db.select_user(user_id=user_id):
        db.add_user(user_id=user_id, username=call.from_user.username, phone_number=phone_number)
    
    await state.finish()
