import logging

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram_dialog import DialogManager

from handlers.users.main import Sub
from keyboards.default import contact_keyboard
from keyboards.inline.buttons import user_back_callback, back, additional_callback, start_button, \
    cancel_keyboard
from loader import dp, bot


@dp.callback_query_handler(additional_callback.filter(status="cancel_start"), state="first_last_name")
async def come_back_to_start(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)

    await call.message.edit_reply_markup()
    text = "<b>–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫—É STUDIO 69 </b>üî∫\n\n" \
           "–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –î–∞–≤–∏–¥ –∏ –í–ª–∞–¥ üôå\n\n" \
           "–ö–∞–∂–¥—ã–π, –∫—Ç–æ –ø—Ä–æ—à–µ–ª –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –∫ <b>–∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram-–∫–∞–Ω–∞–ª—É </b>—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª–∏–∂–∞–π—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.\n\n" \
           "‚ùóÔ∏è–ú—ã –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –≤—Å–µ –Ω–∞—à–∏ –≤–µ—á–µ—Ä–∏–Ω–∫–∏.<i> –í–µ–¥—å —Ä–µ—à–µ–Ω–∏–µ –æ –≤–∞—à–µ–º —É—á–∞—Å—Ç–∏–∏ </i>–ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –º—ã, –Ω–æ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –≥–æ—Å—Ç–∏ <b>STUDIO 69</b>.\n\n" \
           "‚ÄºÔ∏è–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º.<i> –í—Å—è —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞ </i>–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º."
    try:
        await call.message.edit_text(text, reply_markup=start_button)
    except Exception as e:
        logging.info(e)
    
    await state.set_state("start")


@dp.callback_query_handler(user_back_callback.filter(), state="*")
async def come_back(call: types.CallbackQuery, state: FSMContext, callback_data: dict, dialog_manager: DialogManager):
    status = callback_data.get("status")
    await call.answer(cache_time=60)
    user_state = await state.get_state()
    m_id = callback_data.get("m_id")
    
    if status == "first_last_name" and user_state == "date_of_birth":
        await call.message.edit_reply_markup()
        await call.message.edit_text("<b>–í–∞—à–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—è / First, last Name</b>\n"
                                  "<i>–¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è / Only real name</i>", reply_markup=await cancel_keyboard("start"))
        await state.set_state("first_last_name")
    
    elif status == "date_of_birth" and user_state == "Sub:gender":
        await call.answer(cache_time=30)
        await call.message.edit_text("<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è / Date of birth</b>\n<i>–ú–ú/DD/YYYY</i>",
                                  reply_markup=await back("first_last_name"))
        
        await state.set_state("date_of_birth")
    
    elif status == "check_box" and user_state == "Sub:planning_to_come":
        await Sub.text.set()
        await dialog_manager.start(Sub.text, reset_stack=True)

    elif status == "how_did_your_hear" and user_state == "will_you_come":
        try:
            await call.message.edit_text("<b>–ö–∞–∫ –≤—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏? / How did you hear about us?</b>",
                                      reply_markup=await back("check_box"))
            await Sub.planning_to_come.set()
        except Exception as e:
            logging.info(e)
        
    elif status == "with_who" and user_state == "phone_number":
        try:
            await bot.delete_message(chat_id=call.message.chat.id, message_id=m_id)
            await call.message.edit_text("<b>–° –∫–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–π—Ç–∏? / Who are you planning to come with?\n\n</b>"
                                      "<i>–ù–∞–ø–∏—à–∏—Ç–µ, —Å –∫–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–π—Ç–∏, –∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤"
                                      " Instagram —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.\n"
                                      "(—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–π).</i>", reply_markup=await back("how_did_your_hear"))
            await state.set_state("will_you_come")
        except Exception as e:
            logging.info(f"{e}")

    elif status == "share_number" and user_state == "rules":
        try:

            await bot.delete_message(chat_id=call.message.chat.id, message_id=m_id)
            await call.message.delete()
            id = (await call.message.answer(
                                              text="<b>–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ / Your phone number </b>\n",
                                              reply_markup=contact_keyboard)).message_id
            
            await call.message.answer("<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è'.\n"
                                 "Press the button 'Share'</i>",
                                 reply_markup=await back("with_who", id))
    
            await state.set_state("phone_number")
        except Exception as e:
            logging.info(e)

    elif status == "social_links" and user_state == "finish":
        try:
            u_id = (await call.message.edit_text("<b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ / Social profiles </b>\n"
                                 "<i>\n–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à Instagram –ª–∏–±–æ Facebook (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–π) / "
                                 "Link to your Instagram or Facebook (account must be public)</i>\n\n")).message_id
            await call.message.answer(
                                 "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: https://instagram.com/studio_69_party –∏–ª–∏ <code>@–∏–º—è</code>\n"
                                 "For example: https://instagram.com/studio_69_party or <code>@name</code></i>",
                                      reply_markup=await back("share_number", u_id), disable_web_page_preview=True)
            
            await state.set_state("rules")
        except Exception as e:
            logging.info(e)